basePath: /api/v1
definitions:
  assistant.Role:
    enum:
    - user
    - assistant
    - system
    - tool
    type: string
    x-enum-varnames:
    - USER
    - ASSISTANT
    - SYSTEM
    - TOOL
  handlers.BulkUpdateStatusRequest:
    properties:
      status:
        $ref: '#/definitions/task.TaskStatus'
      taskIds:
        items:
          type: string
        type: array
    required:
    - status
    - taskIds
    type: object
  handlers.ConversationResponse:
    properties:
      conversation:
        $ref: '#/definitions/types.Conversation'
    type: object
  handlers.CreateNoteResponse:
    properties:
      message:
        example: Note created successfully
        type: string
      note:
        $ref: '#/definitions/note.NoteResponse'
    type: object
  handlers.CreateProjectResponse:
    properties:
      message:
        example: Project created successfully
        type: string
      project:
        $ref: '#/definitions/project.ProjectResponse'
    type: object
  handlers.CreateTaskResponse:
    properties:
      message:
        example: Task created successfully
        type: string
      task:
        $ref: '#/definitions/task.TaskResponse'
    type: object
  handlers.DeleteAccountResponse:
    properties:
      message:
        example: Account deleted successfully
        type: string
    type: object
  handlers.ErrorResponse:
    properties:
      details:
        example: Validation error details
        type: string
      error:
        example: Something went wrong
        type: string
    type: object
  handlers.ListNotesResponse:
    properties:
      notes:
        items:
          $ref: '#/definitions/note.NoteResponse'
        type: array
      pagination:
        $ref: '#/definitions/handlers.PaginationInfo'
    type: object
  handlers.ListProjectsResponse:
    properties:
      pagination:
        $ref: '#/definitions/handlers.PaginationInfo'
      projects:
        items:
          $ref: '#/definitions/project.ProjectResponse'
        type: array
    type: object
  handlers.ListTasksResponse:
    properties:
      pagination:
        $ref: '#/definitions/handlers.PaginationInfo'
      tasks:
        items:
          $ref: '#/definitions/task.TaskResponse'
        type: array
    type: object
  handlers.ListUsersResponse:
    properties:
      pagination:
        $ref: '#/definitions/handlers.PaginationInfo'
      users:
        items:
          $ref: '#/definitions/user.UserResponse'
        type: array
    type: object
  handlers.LoginResponse:
    properties:
      message:
        example: Login successful
        type: string
      tokens:
        $ref: '#/definitions/user.AuthTokens'
      user:
        $ref: '#/definitions/user.UserResponse'
    type: object
  handlers.MemoriesResponse:
    properties:
      count:
        type: integer
      memories:
        items:
          $ref: '#/definitions/types.Memory'
        type: array
    type: object
  handlers.MemoryResponse:
    properties:
      memory:
        $ref: '#/definitions/types.Memory'
    type: object
  handlers.MemorySearchRequest:
    properties:
      limit:
        example: 10
        type: integer
      query:
        example: remember something
        type: string
      type:
        allOf:
        - $ref: '#/definitions/types.MemoryType'
        example: episodic
    required:
    - query
    type: object
  handlers.MessageResponse:
    properties:
      message:
        $ref: '#/definitions/types.Message'
    type: object
  handlers.NoteResponse:
    properties:
      note:
        $ref: '#/definitions/note.NoteResponse'
    type: object
  handlers.PaginationInfo:
    properties:
      limit:
        example: 20
        type: integer
      offset:
        example: 0
        type: integer
      total:
        example: 150
        type: integer
    type: object
  handlers.ProfileResponse:
    properties:
      user:
        $ref: '#/definitions/user.UserResponse'
    type: object
  handlers.ProjectResponse:
    properties:
      project:
        $ref: '#/definitions/project.ProjectResponse'
    type: object
  handlers.RefreshTokenRequest:
    properties:
      refreshToken:
        example: jwt-refresh-token-here
        type: string
    required:
    - refreshToken
    type: object
  handlers.RefreshTokenResponse:
    properties:
      message:
        example: Token refreshed successfully
        type: string
      tokens:
        $ref: '#/definitions/user.AuthTokens'
    type: object
  handlers.RegisterResponse:
    properties:
      message:
        example: User registered successfully
        type: string
      user:
        $ref: '#/definitions/user.UserResponse'
    type: object
  handlers.SearchNotesResponse:
    properties:
      notes:
        items:
          $ref: '#/definitions/note.NoteResponse'
        type: array
      pagination:
        $ref: '#/definitions/handlers.PaginationInfo'
      query:
        type: string
      tags:
        items:
          type: string
        type: array
    type: object
  handlers.SearchTasksResponse:
    properties:
      pagination:
        $ref: '#/definitions/handlers.PaginationInfo'
      query:
        type: string
      tasks:
        items:
          $ref: '#/definitions/task.TaskResponse'
        type: array
    type: object
  handlers.SuccessResponse:
    properties:
      message:
        example: Operation completed successfully
        type: string
    type: object
  handlers.TaskResponse:
    properties:
      task:
        $ref: '#/definitions/task.TaskResponse'
    type: object
  handlers.UpdateNoteResponse:
    properties:
      message:
        example: Note updated successfully
        type: string
      note:
        $ref: '#/definitions/note.NoteResponse'
    type: object
  handlers.UpdateProfileResponse:
    properties:
      message:
        example: Profile updated successfully
        type: string
      user:
        $ref: '#/definitions/user.UserResponse'
    type: object
  handlers.UpdateProjectResponse:
    properties:
      message:
        example: Project updated successfully
        type: string
      project:
        $ref: '#/definitions/project.ProjectResponse'
    type: object
  handlers.UpdateProjectStatusRequest:
    properties:
      status:
        allOf:
        - $ref: '#/definitions/project.ProjectStatus'
        example: in_progress
    required:
    - status
    type: object
  handlers.UpdateTaskResponse:
    properties:
      message:
        example: Task updated successfully
        type: string
      task:
        $ref: '#/definitions/task.TaskResponse'
    type: object
  handlers.UserByIDResponse:
    properties:
      user:
        $ref: '#/definitions/user.UserResponse'
    type: object
  note.CreateNoteRequest:
    description: Request body for note creation
    properties:
      content:
        example: Important reminder about project deadline
        minLength: 1
        type: string
      projectId:
        description: 'Optional: for project logs'
        example: 550e8400-e29b-41d4-a716-446655440002
        type: string
      tags:
        example:
        - reminder
        - deadline
        items:
          type: string
        type: array
    required:
    - content
    type: object
  note.NoteResponse:
    description: Note information returned in API responses
    properties:
      content:
        example: Important reminder about project deadline
        type: string
      createdAt:
        example: "2023-01-01T12:00:00Z"
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      projectId:
        example: 550e8400-e29b-41d4-a716-446655440002
        type: string
      tags:
        example:
        - reminder
        - deadline
        - important
        items:
          type: string
        type: array
      userId:
        example: 550e8400-e29b-41d4-a716-446655440001
        type: string
    type: object
  note.UpdateNoteRequest:
    description: Request body for updating note
    properties:
      content:
        example: Updated note content
        minLength: 1
        type: string
      projectId:
        description: 'Optional: for project logs'
        example: 550e8400-e29b-41d4-a716-446655440002
        type: string
      tags:
        example:
        - reminder
        - updated
        items:
          type: string
        type: array
    type: object
  project.AddProgressEventRequest:
    description: Request body for adding progress event
    properties:
      by:
        example: user
        type: string
      kind:
        allOf:
        - $ref: '#/definitions/project.ProgressEventKind'
        example: started
      memo:
        example: Started working on wireframes
        type: string
    required:
    - by
    - kind
    type: object
  project.CreateProjectRequest:
    description: Request body for project creation
    properties:
      description:
        example: Complete redesign of company website
        type: string
      dueAt:
        example: "2023-12-31T23:59:59Z"
        type: string
      name:
        example: Website Redesign
        maxLength: 255
        minLength: 1
        type: string
      priority:
        allOf:
        - $ref: '#/definitions/project.ProjectPriority'
        example: med
      status:
        allOf:
        - $ref: '#/definitions/project.ProjectStatus'
        example: planned
      tags:
        example:
        - web
        - design
        items:
          type: string
        type: array
    required:
    - name
    type: object
  project.ProgressEvent:
    description: Progress event tracking project changes
    properties:
      at:
        example: "2023-01-01T12:00:00Z"
        type: string
      by:
        description: system/assistant/user
        example: user
        type: string
      kind:
        allOf:
        - $ref: '#/definitions/project.ProgressEventKind'
        example: started
      memo:
        example: Started working on initial setup
        type: string
    type: object
  project.ProgressEventKind:
    enum:
    - planned
    - started
    - blocked
    - unblocked
    - completed
    - comment
    type: string
    x-enum-varnames:
    - EventPlanned
    - EventStarted
    - EventBlocked
    - EventUnblocked
    - EventCompleted
    - EventComment
  project.ProjectPriority:
    enum:
    - low
    - med
    - high
    - urgent
    type: string
    x-enum-varnames:
    - PriorityLow
    - PriorityMed
    - PriorityHigh
    - PriorityUrgent
  project.ProjectResponse:
    description: Project information returned in API responses
    properties:
      createdAt:
        example: "2023-01-01T12:00:00Z"
        type: string
      description:
        example: Complete redesign of company website
        type: string
      dueAt:
        example: "2023-12-31T23:59:59Z"
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      name:
        example: Website Redesign
        type: string
      priority:
        allOf:
        - $ref: '#/definitions/project.ProjectPriority'
        example: high
      progress:
        items:
          $ref: '#/definitions/project.ProgressEvent'
        type: array
      status:
        allOf:
        - $ref: '#/definitions/project.ProjectStatus'
        example: in_progress
      tags:
        example:
        - web
        - design
        - frontend
        items:
          type: string
        type: array
      updatedAt:
        example: "2023-01-01T12:00:00Z"
        type: string
      userId:
        example: 550e8400-e29b-41d4-a716-446655440001
        type: string
    type: object
  project.ProjectStatus:
    enum:
    - planned
    - in_progress
    - blocked
    - done
    - archived
    type: string
    x-enum-varnames:
    - StatusPlanned
    - StatusInProgress
    - StatusBlocked
    - StatusDone
    - StatusArchived
  project.UpdateProjectRequest:
    description: Request body for updating project
    properties:
      description:
        example: Updated description
        type: string
      dueAt:
        example: "2023-12-31T23:59:59Z"
        type: string
      name:
        example: Website Redesign v2
        maxLength: 255
        minLength: 1
        type: string
      priority:
        allOf:
        - $ref: '#/definitions/project.ProjectPriority'
        example: high
      status:
        allOf:
        - $ref: '#/definitions/project.ProjectStatus'
        example: in_progress
      tags:
        example:
        - web
        - design
        - urgent
        items:
          type: string
        type: array
    type: object
  task.CalendarTaskResponse:
    properties:
      dueAt:
        type: string
      id:
        type: string
      isRecurring:
        type: boolean
      priority:
        type: integer
      scheduledAt:
        type: string
      status:
        $ref: '#/definitions/task.TaskStatus'
      title:
        type: string
    type: object
  task.CreateTaskRequest:
    properties:
      description:
        maxLength: 1000
        type: string
      dueAt:
        type: string
      isRecurring:
        type: boolean
      metadata:
        additionalProperties: {}
        type: object
      priority:
        maximum: 5
        minimum: 1
        type: integer
      recurrenceConfig:
        $ref: '#/definitions/task.RecurrenceConfig'
      scheduledAt:
        type: string
      tags:
        items:
          type: string
        type: array
      title:
        maxLength: 200
        minLength: 1
        type: string
    required:
    - title
    type: object
  task.RecurrenceConfig:
    properties:
      daysOfMonth:
        description: For monthly (1-31)
        items:
          type: integer
        type: array
      daysOfWeek:
        description: For weekly (0=Sunday, 1=Monday, etc.)
        items:
          type: integer
        type: array
      endDate:
        description: When to stop recurring
        type: string
      interval:
        description: For custom recurrence (e.g., every 2 days)
        type: integer
      maxOccurrences:
        description: Maximum number of occurrences
        type: integer
      monthsOfYear:
        description: For yearly (1-12)
        items:
          type: integer
        type: array
      timeZone:
        description: Timezone for scheduling
        type: string
      type:
        $ref: '#/definitions/task.RecurrenceType'
    type: object
  task.RecurrenceType:
    enum:
    - none
    - daily
    - weekly
    - monthly
    - yearly
    - custom
    type: string
    x-enum-varnames:
    - RecurrenceNone
    - RecurrenceDaily
    - RecurrenceWeekly
    - RecurrenceMonthly
    - RecurrenceYearly
    - RecurrenceCustom
  task.TaskResponse:
    properties:
      cancelledAt:
        type: string
      completedAt:
        type: string
      createdAt:
        type: string
      description:
        type: string
      dueAt:
        type: string
      executionCount:
        type: integer
      id:
        type: string
      isRecurring:
        type: boolean
      metadata:
        additionalProperties: {}
        type: object
      nextExecution:
        type: string
      parentTaskId:
        type: string
      priority:
        type: integer
      recurrenceConfig:
        $ref: '#/definitions/task.RecurrenceConfig'
      scheduledAt:
        type: string
      status:
        $ref: '#/definitions/task.TaskStatus'
      tags:
        items:
          type: string
        type: array
      title:
        type: string
      updatedAt:
        type: string
      userId:
        type: string
    type: object
  task.TaskStatus:
    enum:
    - pending
    - cancelled
    - done
    type: string
    x-enum-varnames:
    - StatusPending
    - StatusCancelled
    - StatusDone
  task.UpdateTaskRequest:
    properties:
      description:
        maxLength: 1000
        type: string
      dueAt:
        type: string
      isRecurring:
        type: boolean
      metadata:
        additionalProperties: {}
        type: object
      priority:
        maximum: 5
        minimum: 1
        type: integer
      recurrenceConfig:
        $ref: '#/definitions/task.RecurrenceConfig'
      scheduledAt:
        type: string
      tags:
        items:
          type: string
        type: array
      title:
        maxLength: 200
        minLength: 1
        type: string
    type: object
  task.UpdateTaskStatusRequest:
    properties:
      status:
        $ref: '#/definitions/task.TaskStatus'
    required:
    - status
    type: object
  types.Conversation:
    properties:
      created_at:
        type: string
      id:
        type: string
      memories:
        items:
          $ref: '#/definitions/types.Memory'
        type: array
      messages:
        description: Relationships
        items:
          $ref: '#/definitions/types.Message'
        type: array
      owner_id:
        type: string
      summary:
        type: string
      updated_at:
        type: string
    type: object
  types.CreateMemory:
    description: Memory creation body
    properties:
      content:
        example: Remember to call John tomorrow at 3 PM
        type: string
      type:
        allOf:
        - $ref: '#/definitions/types.MemoryType'
        enum:
        - episodic
        - semantic
        example: episodic
    required:
    - content
    - type
    type: object
  types.CreateMessage:
    description: Msg creation body
    properties:
      text:
        example: Hey friend, remind me to call a friend tomorrow
        type: string
      timestamp:
        example: "2023-12-25T09:00:00Z"
        type: string
    required:
    - text
    - timestamp
    type: object
  types.Memory:
    properties:
      conversation_id:
        type: string
      created_at:
        description: |-
          Embeddings
          EmbeddingRef any       `json:"embedding_ref"`
        type: string
      id:
        example: ""
        type: string
      memory_type:
        $ref: '#/definitions/types.MemoryType'
      saliency_score:
        description: Ever growing saliency score MRU
        type: integer
      string:
        type: string
      updated_at:
        type: string
    type: object
  types.MemoryType:
    enum:
    - episodic
    - semantic
    type: string
    x-enum-varnames:
    - EPISODIC
    - SEMANTIC
  types.Message:
    properties:
      conversation_id:
        type: string
      id:
        type: string
      msg_role:
        $ref: '#/definitions/assistant.Role'
      tags:
        items:
          type: string
        type: array
      text:
        type: string
      timestamp:
        type: string
      user_id:
        type: string
    type: object
  user.AuthTokens:
    description: JWT authentication tokens
    properties:
      accessToken:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      expiresAt:
        example: "2023-01-02T12:00:00Z"
        type: string
      refreshToken:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    type: object
  user.CreateUserRequest:
    description: Request body for user registration
    properties:
      displayName:
        example: John Doe
        maxLength: 100
        minLength: 2
        type: string
      email:
        example: john@example.com
        type: string
      password:
        example: securePassword123
        minLength: 8
        type: string
      settings:
        type: object
      timezone:
        example: America/New_York
        type: string
    required:
    - displayName
    - email
    - password
    type: object
  user.LoginRequest:
    description: Request body for user login
    properties:
      email:
        example: john@example.com
        type: string
      password:
        example: securePassword123
        type: string
    required:
    - email
    - password
    type: object
  user.OffTimeRange:
    description: Time range when user is not available
    properties:
      end:
        example: "2023-12-25T17:00:00Z"
        type: string
      label:
        example: Christmas Day
        type: string
      start:
        example: "2023-12-25T09:00:00Z"
        type: string
    type: object
  user.UpdateUserRequest:
    description: Request body for updating user profile
    properties:
      displayName:
        example: John Smith
        maxLength: 100
        minLength: 2
        type: string
      offTimes:
        items:
          $ref: '#/definitions/user.OffTimeRange'
        type: array
      settings:
        type: object
      timezone:
        example: Europe/London
        type: string
    type: object
  user.UserResponse:
    description: User information returned in API responses (no sensitive data)
    properties:
      createdAt:
        example: "2023-01-01T12:00:00Z"
        type: string
      displayName:
        example: John Doe
        type: string
      email:
        example: john@example.com
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      offTimes:
        items:
          $ref: '#/definitions/user.OffTimeRange'
        type: array
      settings:
        type: object
      timezone:
        example: America/New_York
        type: string
      updatedAt:
        example: "2023-01-01T12:00:00Z"
        type: string
    type: object
host: localhost:8088
info:
  contact:
    email: xpanvictor@gmail.com
    name: API Support
  description: Xarvis AI Assistant API with user management and WebSocket communication
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Xarvis API
  version: "1.0"
paths:
  /admin/notes:
    get:
      consumes:
      - application/json
      description: List all notes in the system with optional filtering (admin only)
      parameters:
      - description: Search in note content
        in: query
        name: search
        type: string
      - description: Filter by tags (comma-separated)
        in: query
        name: tags
        type: string
      - default: created_at
        description: Order by field (created_at, content)
        in: query
        name: orderBy
        type: string
      - default: desc
        description: Order direction (asc, desc)
        in: query
        name: order
        type: string
      - default: 0
        description: Number of notes to skip
        in: query
        name: offset
        type: integer
      - default: 20
        description: Number of notes to return
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of notes with pagination
          schema:
            $ref: '#/definitions/handlers.ListNotesResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Admin access required
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List all notes (Admin)
      tags:
      - Admin
  /admin/projects:
    get:
      consumes:
      - application/json
      description: List all projects in the system with optional filtering (admin
        only)
      parameters:
      - description: Filter by status
        enum:
        - planned
        - in_progress
        - blocked
        - done
        - archived
        in: query
        name: status
        type: string
      - description: Filter by priority
        enum:
        - low
        - med
        - high
        - urgent
        in: query
        name: priority
        type: string
      - collectionFormat: csv
        description: Filter by tags (comma-separated)
        in: query
        items:
          type: string
        name: tags
        type: array
      - default: 0
        description: Number of projects to skip
        in: query
        name: offset
        type: integer
      - default: 20
        description: Number of projects to return
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of projects with pagination
          schema:
            $ref: '#/definitions/handlers.ListProjectsResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Admin access required
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List all projects (Admin)
      tags:
      - Admin
  /admin/tasks:
    get:
      consumes:
      - application/json
      description: List all tasks in the system with optional filtering (admin only)
      parameters:
      - description: Filter by status
        in: query
        name: status
        type: string
      - description: Filter by priority
        in: query
        name: priority
        type: integer
      - description: Filter by tags (comma-separated)
        in: query
        name: tags
        type: string
      - description: Search in task content
        in: query
        name: search
        type: string
      - default: createdAt
        description: Order by field
        in: query
        name: orderBy
        type: string
      - default: desc
        description: Order direction (asc, desc)
        in: query
        name: order
        type: string
      - default: 0
        description: Number of tasks to skip
        in: query
        name: offset
        type: integer
      - default: 20
        description: Number of tasks to return
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of tasks with pagination
          schema:
            $ref: '#/definitions/handlers.ListTasksResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Admin access required
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List all tasks (Admin)
      tags:
      - Admin
  /admin/users:
    get:
      consumes:
      - application/json
      description: List all users with pagination (admin only)
      parameters:
      - default: 0
        description: Number of users to skip
        in: query
        name: offset
        type: integer
      - default: 20
        description: Number of users to return
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of users with pagination
          schema:
            $ref: '#/definitions/handlers.ListUsersResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Admin access required
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List users (Admin)
      tags:
      - Admin
  /admin/users/{id}:
    get:
      consumes:
      - application/json
      description: Get a specific user by ID (admin only)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User data
          schema:
            $ref: '#/definitions/handlers.UserByIDResponse'
        "400":
          description: User ID is required
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Admin access required
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user by ID (Admin)
      tags:
      - Admin
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user with email and password
      parameters:
      - description: User login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful with user data and tokens
          schema:
            $ref: '#/definitions/handlers.LoginResponse'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: User login
      tags:
      - Authentication
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Refresh an expired access token using refresh token
      parameters:
      - description: Refresh token data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Token refreshed successfully
          schema:
            $ref: '#/definitions/handlers.RefreshTokenResponse'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Invalid refresh token
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Refresh access token
      tags:
      - Authentication
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user account with email and password
      parameters:
      - description: User registration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            $ref: '#/definitions/handlers.RegisterResponse'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "409":
          description: Email already exists
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Register a new user
      tags:
      - Authentication
  /conversation:
    get:
      consumes:
      - application/json
      description: Retrieves the conversation history for the authenticated user including
        messages and memories
      produces:
      - application/json
      responses:
        "200":
          description: User conversation data
          schema:
            $ref: '#/definitions/handlers.ConversationResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Retrieve user conversation
      tags:
      - Conversation
  /conversation/memories/{id}:
    delete:
      description: Deletes a specific memory belonging to the authenticated user
      parameters:
      - description: Memory ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a memory
      tags:
      - Conversation
  /conversation/memories/search:
    post:
      consumes:
      - application/json
      description: Searches for memories belonging to the authenticated user based
        on query and optional filters
      parameters:
      - description: Memory search parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.MemorySearchRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.MemoriesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Search user memories
      tags:
      - Conversation
  /conversation/memory:
    post:
      consumes:
      - application/json
      description: Creates a new memory entry for the authenticated user's conversation
      parameters:
      - description: Memory creation data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/types.CreateMemory'
      produces:
      - application/json
      responses:
        "201":
          description: Created memory
          schema:
            $ref: '#/definitions/handlers.MemoryResponse'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new memory
      tags:
      - Conversation
  /conversation/message:
    post:
      consumes:
      - application/json
      description: Processes a user message through the conversation service and returns
        an AI-generated response
      parameters:
      - description: User message data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/types.CreateMessage'
      produces:
      - application/json
      responses:
        "201":
          description: AI response message
          schema:
            $ref: '#/definitions/handlers.MessageResponse'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error or couldn't process message
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Process user message and generate AI response
      tags:
      - Conversation
  /notes:
    get:
      consumes:
      - application/json
      description: List all notes for the authenticated user with optional filtering
      parameters:
      - description: Search in note content
        in: query
        name: search
        type: string
      - description: Filter by tags (comma-separated)
        in: query
        name: tags
        type: string
      - default: created_at
        description: Order by field (created_at, content)
        in: query
        name: orderBy
        type: string
      - default: desc
        description: Order direction (asc, desc)
        in: query
        name: order
        type: string
      - default: 0
        description: Number of notes to skip
        in: query
        name: offset
        type: integer
      - default: 20
        description: Number of notes to return
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of notes with pagination
          schema:
            $ref: '#/definitions/handlers.ListNotesResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List user notes
      tags:
      - Notes
    post:
      consumes:
      - application/json
      description: Create a new note for the authenticated user
      parameters:
      - description: Note creation data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/note.CreateNoteRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Note created successfully
          schema:
            $ref: '#/definitions/handlers.CreateNoteResponse'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new note
      tags:
      - Notes
  /notes/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a specific note (user can only delete their own notes)
      parameters:
      - description: Note ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Note deleted successfully
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Invalid note ID
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Unauthorized access
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Note not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete note
      tags:
      - Notes
    get:
      consumes:
      - application/json
      description: Get a specific note by ID (user can only access their own notes)
      parameters:
      - description: Note ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Note data
          schema:
            $ref: '#/definitions/handlers.NoteResponse'
        "400":
          description: Invalid note ID
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Unauthorized access
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Note not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get note by ID
      tags:
      - Notes
    put:
      consumes:
      - application/json
      description: Update a specific note (user can only update their own notes)
      parameters:
      - description: Note ID
        in: path
        name: id
        required: true
        type: string
      - description: Note update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/note.UpdateNoteRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Note updated successfully
          schema:
            $ref: '#/definitions/handlers.UpdateNoteResponse'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Unauthorized access
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Note not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update note
      tags:
      - Notes
  /notes/search:
    get:
      consumes:
      - application/json
      description: Search notes by content and/or tags for the authenticated user
      parameters:
      - description: Search query
        in: query
        name: q
        required: true
        type: string
      - description: Filter by tags (comma-separated)
        in: query
        name: tags
        type: string
      - default: 0
        description: Number of notes to skip
        in: query
        name: offset
        type: integer
      - default: 20
        description: Number of notes to return
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Search results with pagination
          schema:
            $ref: '#/definitions/handlers.SearchNotesResponse'
        "400":
          description: Search query is required
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Search notes
      tags:
      - Notes
  /notes/tags:
    get:
      consumes:
      - application/json
      description: Get notes filtered by specific tags for the authenticated user
      parameters:
      - description: Tags to filter by (comma-separated)
        in: query
        name: tags
        required: true
        type: string
      - default: 0
        description: Number of notes to skip
        in: query
        name: offset
        type: integer
      - default: 20
        description: Number of notes to return
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of notes with pagination
          schema:
            $ref: '#/definitions/handlers.ListNotesResponse'
        "400":
          description: Tags parameter is required
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get notes by tags
      tags:
      - Notes
  /projects:
    get:
      consumes:
      - application/json
      description: List all projects for the authenticated user with optional filtering
      parameters:
      - description: Filter by status
        enum:
        - planned
        - in_progress
        - blocked
        - done
        - archived
        in: query
        name: status
        type: string
      - description: Filter by priority
        enum:
        - low
        - med
        - high
        - urgent
        in: query
        name: priority
        type: string
      - collectionFormat: csv
        description: Filter by tags (comma-separated)
        in: query
        items:
          type: string
        name: tags
        type: array
      - default: 0
        description: Number of projects to skip
        in: query
        name: offset
        type: integer
      - default: 20
        description: Number of projects to return
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of projects with pagination
          schema:
            $ref: '#/definitions/handlers.ListProjectsResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List user projects
      tags:
      - Projects
    post:
      consumes:
      - application/json
      description: Create a new project for the authenticated user
      parameters:
      - description: Project creation data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/project.CreateProjectRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Project created successfully
          schema:
            $ref: '#/definitions/handlers.CreateProjectResponse'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new project
      tags:
      - Projects
  /projects/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a specific project (user can only delete their own projects)
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Project deleted successfully
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Invalid project ID
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Unauthorized access
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Project not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete project
      tags:
      - Projects
    get:
      consumes:
      - application/json
      description: Get a specific project by ID (user can only access their own projects)
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Project data
          schema:
            $ref: '#/definitions/handlers.ProjectResponse'
        "400":
          description: Invalid project ID
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Unauthorized access
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Project not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get project by ID
      tags:
      - Projects
    put:
      consumes:
      - application/json
      description: Update a specific project (user can only update their own projects)
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      - description: Project update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/project.UpdateProjectRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Project updated successfully
          schema:
            $ref: '#/definitions/handlers.UpdateProjectResponse'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Unauthorized access
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Project not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update project
      tags:
      - Projects
  /projects/{id}/progress:
    post:
      consumes:
      - application/json
      description: Add a progress event to a specific project
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      - description: Progress event data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/project.AddProgressEventRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Progress event added successfully
          schema:
            $ref: '#/definitions/handlers.UpdateProjectResponse'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Unauthorized access
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Project not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Add progress event
      tags:
      - Projects
  /projects/{id}/status:
    put:
      consumes:
      - application/json
      description: Update the status of a specific project
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      - description: Status update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateProjectStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Project status updated successfully
          schema:
            $ref: '#/definitions/handlers.UpdateProjectResponse'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Unauthorized access
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Project not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update project status
      tags:
      - Projects
  /projects/{projectId}/notes:
    get:
      consumes:
      - application/json
      description: Get all notes/logs for a specific project
      parameters:
      - description: Project ID
        in: path
        name: projectId
        required: true
        type: string
      - default: 0
        description: Number of notes to skip
        in: query
        name: offset
        type: integer
      - default: 20
        description: Number of notes to return
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of project notes/logs with pagination
          schema:
            $ref: '#/definitions/handlers.ListNotesResponse'
        "400":
          description: Invalid project ID
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get project notes/logs
      tags:
      - Projects
    post:
      consumes:
      - application/json
      description: Create a new note/log entry for a specific project
      parameters:
      - description: Project ID
        in: path
        name: projectId
        required: true
        type: string
      - description: Note creation data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/note.CreateNoteRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Project note created successfully
          schema:
            $ref: '#/definitions/handlers.CreateNoteResponse'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create project note/log
      tags:
      - Projects
  /tasks:
    get:
      consumes:
      - application/json
      description: List all tasks for the authenticated user with optional filtering
      parameters:
      - description: Filter by status (pending, done, cancelled)
        in: query
        name: status
        type: string
      - description: Filter by priority (1-5)
        in: query
        name: priority
        type: integer
      - description: Filter by tags (comma-separated)
        in: query
        name: tags
        type: string
      - description: Filter by recurring status
        in: query
        name: isRecurring
        type: boolean
      - description: Filter overdue tasks
        in: query
        name: isOverdue
        type: boolean
      - description: Filter from date (RFC3339)
        in: query
        name: fromDate
        type: string
      - description: Filter to date (RFC3339)
        in: query
        name: toDate
        type: string
      - description: Search in task title and description
        in: query
        name: search
        type: string
      - default: createdAt
        description: Order by field (scheduledAt, dueAt, priority, createdAt)
        in: query
        name: orderBy
        type: string
      - default: desc
        description: Order direction (asc, desc)
        in: query
        name: order
        type: string
      - default: 0
        description: Number of tasks to skip
        in: query
        name: offset
        type: integer
      - default: 20
        description: Number of tasks to return
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of tasks with pagination
          schema:
            $ref: '#/definitions/handlers.ListTasksResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List user tasks
      tags:
      - Tasks
    post:
      consumes:
      - application/json
      description: Create a new task for the authenticated user
      parameters:
      - description: Task creation data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/task.CreateTaskRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Task created successfully
          schema:
            $ref: '#/definitions/handlers.CreateTaskResponse'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new task
      tags:
      - Tasks
  /tasks/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a specific task (user can only delete their own tasks)
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Task deleted successfully
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Invalid task ID
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Unauthorized access
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Task not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete task
      tags:
      - Tasks
    get:
      consumes:
      - application/json
      description: Get a specific task by ID (user can only access their own tasks)
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Task data
          schema:
            $ref: '#/definitions/handlers.TaskResponse'
        "400":
          description: Invalid task ID
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Unauthorized access
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Task not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get task by ID
      tags:
      - Tasks
    put:
      consumes:
      - application/json
      description: Update a specific task (user can only update their own tasks)
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      - description: Task update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/task.UpdateTaskRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Task updated successfully
          schema:
            $ref: '#/definitions/handlers.UpdateTaskResponse'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Unauthorized access
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Task not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update task
      tags:
      - Tasks
  /tasks/{id}/cancel:
    post:
      consumes:
      - application/json
      description: Mark a specific task as cancelled
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Task marked as cancelled
          schema:
            $ref: '#/definitions/handlers.UpdateTaskResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Unauthorized access
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Task not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Mark task as cancelled
      tags:
      - Tasks
  /tasks/{id}/complete:
    post:
      consumes:
      - application/json
      description: Mark a specific task as completed
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Task marked as completed
          schema:
            $ref: '#/definitions/handlers.UpdateTaskResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Unauthorized access
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Task not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Mark task as completed
      tags:
      - Tasks
  /tasks/{id}/status:
    put:
      consumes:
      - application/json
      description: Update the status of a specific task
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      - description: Status update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/task.UpdateTaskStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Task status updated successfully
          schema:
            $ref: '#/definitions/handlers.UpdateTaskResponse'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Unauthorized access
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Task not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update task status
      tags:
      - Tasks
  /tasks/{parentId}/instances:
    get:
      consumes:
      - application/json
      description: Get all instances of a recurring task
      parameters:
      - description: Parent Task ID
        in: path
        name: parentId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of task instances
          schema:
            items:
              $ref: '#/definitions/task.TaskResponse'
            type: array
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Unauthorized access
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Parent task not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get task instances
      tags:
      - Tasks
  /tasks/bulk/status:
    put:
      consumes:
      - application/json
      description: Update status for multiple tasks at once
      parameters:
      - description: Bulk update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.BulkUpdateStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Tasks updated successfully
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Bulk update task status
      tags:
      - Tasks
  /tasks/calendar:
    get:
      consumes:
      - application/json
      description: Get tasks for calendar view within specified date range
      parameters:
      - description: Start date (RFC3339)
        in: query
        name: fromDate
        required: true
        type: string
      - description: End date (RFC3339)
        in: query
        name: toDate
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of calendar tasks
          schema:
            items:
              $ref: '#/definitions/task.CalendarTaskResponse'
            type: array
        "400":
          description: Invalid date parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get calendar tasks
      tags:
      - Tasks
  /tasks/due-today:
    get:
      consumes:
      - application/json
      description: Get all tasks due today for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: List of tasks due today
          schema:
            items:
              $ref: '#/definitions/task.TaskResponse'
            type: array
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get tasks due today
      tags:
      - Tasks
  /tasks/overdue:
    get:
      consumes:
      - application/json
      description: Get all overdue tasks for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: List of overdue tasks
          schema:
            items:
              $ref: '#/definitions/task.TaskResponse'
            type: array
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get overdue tasks
      tags:
      - Tasks
  /tasks/recurring:
    get:
      consumes:
      - application/json
      description: Get all recurring tasks for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: List of recurring tasks
          schema:
            items:
              $ref: '#/definitions/task.TaskResponse'
            type: array
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get recurring tasks
      tags:
      - Tasks
  /tasks/search:
    get:
      consumes:
      - application/json
      description: Search tasks by content and/or other criteria for the authenticated
        user
      parameters:
      - description: Search query
        in: query
        name: q
        required: true
        type: string
      - description: Filter by status
        in: query
        name: status
        type: string
      - description: Filter by tags (comma-separated)
        in: query
        name: tags
        type: string
      - default: 0
        description: Number of tasks to skip
        in: query
        name: offset
        type: integer
      - default: 20
        description: Number of tasks to return
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Search results with pagination
          schema:
            $ref: '#/definitions/handlers.SearchTasksResponse'
        "400":
          description: Search query is required
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Search tasks
      tags:
      - Tasks
  /tasks/tags:
    get:
      consumes:
      - application/json
      description: Get tasks filtered by specific tags for the authenticated user
      parameters:
      - description: Tags to filter by (comma-separated)
        in: query
        name: tags
        required: true
        type: string
      - default: 0
        description: Number of tasks to skip
        in: query
        name: offset
        type: integer
      - default: 20
        description: Number of tasks to return
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of tasks with pagination
          schema:
            $ref: '#/definitions/handlers.ListTasksResponse'
        "400":
          description: Tags parameter is required
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get tasks by tags
      tags:
      - Tasks
  /tasks/upcoming:
    get:
      consumes:
      - application/json
      description: Get upcoming tasks for the authenticated user within specified
        days
      parameters:
      - default: 7
        description: Number of days to look ahead
        in: query
        name: days
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of upcoming tasks
          schema:
            items:
              $ref: '#/definitions/task.TaskResponse'
            type: array
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get upcoming tasks
      tags:
      - Tasks
  /user/account:
    delete:
      consumes:
      - application/json
      description: Delete the current authenticated user's account
      produces:
      - application/json
      responses:
        "200":
          description: Account deleted successfully
          schema:
            $ref: '#/definitions/handlers.DeleteAccountResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete user account
      tags:
      - User Profile
  /user/profile:
    get:
      consumes:
      - application/json
      description: Get the current authenticated user's profile
      produces:
      - application/json
      responses:
        "200":
          description: User profile data
          schema:
            $ref: '#/definitions/handlers.ProfileResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - User Profile
    put:
      consumes:
      - application/json
      description: Update the current authenticated user's profile
      parameters:
      - description: Profile update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Profile updated successfully
          schema:
            $ref: '#/definitions/handlers.UpdateProfileResponse'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update user profile
      tags:
      - User Profile
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
